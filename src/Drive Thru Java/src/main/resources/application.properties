# Application Name
spring.application.name=Drive Thru Java

# Default Profile
spring.profiles.active=dev

# Common Configuration
server.port=${SERVER_PORT:5000}
spring.jpa.open-in-view=false

# Datasource Configuration
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:mysql://mysql:3306/drive_thru?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:root}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:}

# JPA / Hibernate
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL:false}
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL:false}

## DDL script generation disabled in container runtime
## The following JPA/Hibernate properties were used to write DDL to files during development,
## but they require Hibernate internals that are not present in the runtime classpath inside
## the fat jar and cause startup failures (ClassNotFoundException for
## org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor).
## If you need the DDL file, run mysqldump against a running MySQL instance or enable these
## properties temporarily in a local development run (not in the container image).
# javax.persistence.schema-generation.scripts.action=create
# javax.persistence.schema-generation.scripts.create-target=ddl/schema-create.sql
# javax.persistence.schema-generation.scripts.drop-target=ddl/schema-drop.sql
# javax.persistence.schema-generation.scripts.create-source=metadata
# javax.persistence.schema-generation.scripts.drop-source=metadata
# spring.jpa.properties.hibernate.hbm2ddl.halt_on_error=true
# spring.jpa.properties.hibernate.hbm2ddl.import_files_sql_extractor=org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor

# Debug
debug=false
